Namespace Analysis

	''' <summary></summary>
	''' <autogenerated>Generated from a T4 template. Modifications will be lost, if applicable use a partial class instead.</autogenerated>
	''' <generator-date>03/02/2014 13:06:37</generator-date>
	''' <generator-functions>1</generator-functions>
	''' <generator-source>Athena\Athena\_Analysis\Generated\Result.tt</generator-source>
	''' <generator-template>Text-Templates\Classes\VB_Object.tt</generator-template>
	''' <generator-version>1</generator-version>
	<System.CodeDom.Compiler.GeneratedCode("Athena\Athena\_Analysis\Generated\Result.tt", "1")> _
	<System.Serializable()> _
	Partial Public Class Result
		Inherits System.Object
		Implements System.IComparable
		Implements System.ComponentModel.INotifyPropertyChanged

		#Region " Public Constructors "

			''' <summary>Default Constructor</summary>
			Public Sub New()

				MyBase.New()

				m_Nodes = New System.Collections.Generic.List(Of Athena.Analysis.Node)
				m_Edges = New System.Collections.Generic.List(Of Athena.Analysis.Edge)
			End Sub

			''' <summary>Parametered Constructor (1 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String _
			)

				MyBase.New()

				Name = _Name

				m_Nodes = New System.Collections.Generic.List(Of Athena.Analysis.Node)
				m_Edges = New System.Collections.Generic.List(Of Athena.Analysis.Edge)
			End Sub

			''' <summary>Parametered Constructor (2 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _Count As System.Int32 _
			)

				MyBase.New()

				Name = _Name
				Count = _Count

				m_Nodes = New System.Collections.Generic.List(Of Athena.Analysis.Node)
				m_Edges = New System.Collections.Generic.List(Of Athena.Analysis.Edge)
			End Sub

			''' <summary>Parametered Constructor (3 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _Count As System.Int32, _
				ByVal _Nodes As System.Collections.Generic.List(Of Athena.Analysis.Node) _
			)

				MyBase.New()

				Name = _Name
				Count = _Count
				Nodes = _Nodes

				m_Edges = New System.Collections.Generic.List(Of Athena.Analysis.Edge)
			End Sub

			''' <summary>Parametered Constructor (4 Parameters)</summary>
			Public Sub New( _
				ByVal _Name As System.String, _
				ByVal _Count As System.Int32, _
				ByVal _Nodes As System.Collections.Generic.List(Of Athena.Analysis.Node), _
				ByVal _Edges As System.Collections.Generic.List(Of Athena.Analysis.Edge) _
			)

				MyBase.New()

				Name = _Name
				Count = _Count
				Nodes = _Nodes
				Edges = _Edges

			End Sub

		#End Region

		#Region " Class Plumbing/Interface Code "

			#Region " IComparable Implementation "

				#Region " Public Methods "

					''' <summary>Comparison Method</summary>
					Public Overridable Function IComparable_CompareTo( _
						ByVal value As System.Object _
					) As System.Int32 Implements System.IComparable.CompareTo

						Dim typed_Value As Result = TryCast(value, Result)

						If typed_Value Is Nothing Then

							Throw New ArgumentException(String.Format("Value is not of comparable type: {0}", value.GetType.Name), "Value")

						Else

							Dim return_Value As Integer = 0

							If Not Name Is Nothing Then return_Value = Name.CompareTo(typed_Value.Name)
							If return_Value <> 0 Then Return return_Value

							Return return_Value

						End If

					End Function

				#End Region

			#End Region

			#Region " INotifyPropertyChanged Implementation "

				#Region " Public Events "

					''' <summary></summary>
					''' <remarks></remarks>
					Public Event INotifyPropertyChanged_PropertyChanged( _
						ByVal sender As System.Object, _
						ByVal e As System.ComponentModel.PropertyChangedEventArgs _
					) Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

				#End Region

				#Region " Protected Methods "

					''' <summary></summary>
					''' <remarks></remarks>
					Protected Sub INotifyPropertyChanged_RaiseChanged( _
						ByVal propertyName As System.String _
					)
						RaiseEvent INotifyPropertyChanged_PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
					End Sub

				#End Region

			#End Region

		#End Region

		#Region " Public Constants "

			''' <summary>Public Shared Reference to the Name of the Property: Name</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_NAME As String = "Name"

			''' <summary>Public Shared Reference to the Name of the Property: Count</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_COUNT As String = "Count"

			''' <summary>Public Shared Reference to the Name of the Property: Nodes</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_NODES As String = "Nodes"

			''' <summary>Public Shared Reference to the Name of the Property: Edges</summary>
			''' <remarks></remarks>
			Public Const PROPERTY_EDGES As String = "Edges"

		#End Region

		#Region " Private Variables "

			''' <summary>Private Data Storage Variable for Property: Name</summary>
			''' <remarks></remarks>
			Private m_Name As System.String

			''' <summary>Private Data Storage Variable for Property: Count</summary>
			''' <remarks></remarks>
			Private m_Count As System.Int32

			''' <summary>Private Data Storage Variable for Property: Nodes</summary>
			''' <remarks></remarks>
			Private m_Nodes As System.Collections.Generic.List(Of Athena.Analysis.Node)

			''' <summary>Private Data Storage Variable for Property: Edges</summary>
			''' <remarks></remarks>
			Private m_Edges As System.Collections.Generic.List(Of Athena.Analysis.Edge)

		#End Region

		#Region " Public Properties "

			''' <summary>Provides Access to the Property: Name</summary>
			''' <remarks></remarks>
			<System.Xml.Serialization.XmlElement(ElementName:="Name")> _
			Public Property Name() As System.String
				Get
					Return m_Name
				End Get
				Set(value As System.String)
					m_Name = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: Count</summary>
			''' <remarks></remarks>
			<System.Xml.Serialization.XmlElement(ElementName:="Count")> _
			Public Property Count() As System.Int32
				Get
					Return m_Count
				End Get
				Set(value As System.Int32)
					m_Count = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: Nodes</summary>
			''' <remarks></remarks>
			<System.Xml.Serialization.XmlElement(ElementName:="Nodes")> _
			Public Property Nodes() As System.Collections.Generic.List(Of Athena.Analysis.Node)
				Get
					Return m_Nodes
				End Get
				Set(value As System.Collections.Generic.List(Of Athena.Analysis.Node))
					m_Nodes = value
				End Set
			End Property

			''' <summary>Provides Access to the Property: Edges</summary>
			''' <remarks></remarks>
			<System.Xml.Serialization.XmlElement(ElementName:="Edges")> _
			Public Property Edges() As System.Collections.Generic.List(Of Athena.Analysis.Edge)
				Get
					Return m_Edges
				End Get
				Set(value As System.Collections.Generic.List(Of Athena.Analysis.Edge))
					m_Edges = value
				End Set
			End Property

		#End Region

	End Class

End Namespace